{
  "name": "drmsi-project",
  "nodes": [
    {
      "parameters": {
        "prompt": "={\n  \"messages\": {\n    \"values\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are a professional trading analyst writing for DRMSI. Output ONLY clean HTML content (no DOCTYPE, html, head, or body tags). Use semantic HTML5 tags. The article must include:\\n\\n1. H1 title (60–70 characters)\\n2. Introduction (1–2 paragraphs)\\n3. Market Overview section with <h2>\\n4. Technical Analysis section with <h2>\\n5. Trading Outlook section with <h2>\\n6. Risk disclaimer in <div class=\\\"risk-disclaimer\\\">\\n\\nLength: 400–500 words. Tone: professional, analytical.\"\n      },\n       {\n      \"role\": \"user\",\n      \"content\": \"Create a comprehensive trading analysis article for {{ $('Smart Symbol Selection').item.json.name }}.\\n\\nDetails:\\n- Symbol: {{ $('Smart Symbol Selection').item.json.symbol }} ({{ $json.symbol }})\\n- Category: {{ $('Smart Symbol Selection').item.json.category }}\\n- Current Price: ${{ $json.currentPrice }}\\n- 24h Change: {{ $json.changePercent }}%\\n- Trend: {{ $json.trend }}\\n- 5-Day High: ${{ $json.fiveDayHigh }}\\n- 5-Day Low: ${{ $json.fiveDayLow }}\\n- Support: ${{ $json.support }}\\n- Resistance: ${{ $json.resistance }}\\n\\nInclude technical outlook, support/resistance levels, and a short-term trading forecast. Output only HTML. Do not include Markdown, JSON, or any extra text. Start directly with <h1>.\"\n    }\n\n    ]\n  }\n}\n",
        "options": {
          "maxTokens": 1200,
          "topP": 0.7
        },
        "requestOptions": {}
      },
      "name": "Generate Article with AI (OpenAI/Gemini)",
      "type": "n8n-nodes-base.openAi",
      "position": [
        -4768,
        -144
      ],
      "id": "bdf67f7d-e824-44c1-8a7e-3a5230b50db9",
      "typeVersion": 1.1,
      "credentials": {
        "openAiApi": {
          "id": "9X9QZJ0g1WvPBvQ3",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 */4 * * *"
            }
          ]
        }
      },
      "name": "Schedule Every 4 Hours",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -7328,
        -192
      ],
      "id": "5bb7d936-9173-4c06-96b7-6ba0139acab6"
    },
    {
      "parameters": {
        "jsCode": "// Symbol mapping for Yahoo Finance and TradingView\nconst symbolMapping = {\n  // Commodities\n  'XAUUSD': { yahoo: 'GC=F', tradingview: 'OANDA:XAUUSD', name: 'Gold', category: 'Commodity' },\n  'XAGUSD': { yahoo: 'SI=F', tradingview: 'OANDA:XAGUSD', name: 'Silver', category: 'Commodity' },\n  \n  // Cryptocurrencies\n  'BTCUSD': { yahoo: 'BTC-USD', tradingview: 'BINANCE:BTCUSDT', name: 'Bitcoin', category: 'Cryptocurrency' },\n  'ETHUSD': { yahoo: 'ETH-USD', tradingview: 'BINANCE:ETHUSDT', name: 'Ethereum', category: 'Cryptocurrency' },\n  'XRPUSD': { yahoo: 'XRP-USD', tradingview: 'BINANCE:XRPUSDT', name: 'Ripple', category: 'Cryptocurrency' },\n  'XLMUSD': { yahoo: 'XLM-USD', tradingview: 'BINANCE:XLMUSDT', name: 'Stellar', category: 'Cryptocurrency' },\n  'SOLUSD': { yahoo: 'SOL-USD', tradingview: 'BINANCE:SOLUSDT', name: 'Solana', category: 'Cryptocurrency' },\n  \n  // Forex Pairs\n  'EURUSD': { yahoo: 'EURUSD=X', tradingview: 'FX:EURUSD', name: 'EUR/USD', category: 'Forex' },\n  'GBPUSD': { yahoo: 'GBPUSD=X', tradingview: 'FX:GBPUSD', name: 'GBP/USD', category: 'Forex' },\n  'USDJPY': { yahoo: 'USDJPY=X', tradingview: 'FX:USDJPY', name: 'USD/JPY', category: 'Forex' },\n  'AUDUSD': { yahoo: 'AUDUSD=X', tradingview: 'FX:AUDUSD', name: 'AUD/USD', category: 'Forex' },\n  'USDCAD': { yahoo: 'USDCAD=X', tradingview: 'FX:USDCAD', name: 'USD/CAD', category: 'Forex' },\n  \n  // FANG Stocks\n  'MSFT': { yahoo: 'MSFT', tradingview: 'NASDAQ:MSFT', name: 'Microsoft', category: 'Stock' },\n  'AAPL': { yahoo: 'AAPL', tradingview: 'NASDAQ:AAPL', name: 'Apple', category: 'Stock' },\n  'AMZN': { yahoo: 'AMZN', tradingview: 'NASDAQ:AMZN', name: 'Amazon', category: 'Stock' },\n  'GOOGL': { yahoo: 'GOOGL', tradingview: 'NASDAQ:GOOGL', name: 'Google', category: 'Stock' },\n  'TSLA': { yahoo: 'TSLA', tradingview: 'NASDAQ:TSLA', name: 'Tesla', category: 'Stock' }\n};\n\n// Time-based symbol selection\nconst hour = new Date().getUTCHours();\nlet selectedSymbols = [];\n\nif (hour >= 0 && hour < 6) {\n  selectedSymbols = ['BTCUSD', 'ETHUSD', 'SOLUSD', 'XRPUSD'];\n} else if (hour >= 6 && hour < 12) {\n  selectedSymbols = ['EURUSD', 'GBPUSD', 'XAUUSD', 'USDJPY'];\n} else if (hour >= 12 && hour < 18) {\n  selectedSymbols = ['AAPL', 'MSFT', 'BTCUSD', 'ETHUSD'];\n} else {\n  selectedSymbols = ['XAUUSD', 'XAGUSD', 'AMZN', 'SOLUSD'];\n}\n\n// Create output array\nreturn selectedSymbols.map(symbol => ({\n  symbol: symbol,\n  yahooSymbol: symbolMapping[symbol].yahoo,\n  tradingviewSymbol: symbolMapping[symbol].tradingview,\n  name: symbolMapping[symbol].name,\n  category: symbolMapping[symbol].category,\n  date: new Date().toISOString().split('T')[0],\n  timestamp: new Date().toISOString()\n}));"
      },
      "name": "Smart Symbol Selection",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5968,
        -64
      ],
      "id": "c0e74251-0e72-47ef-8e95-4e1aadf26e68"
    },
    {
      "parameters": {
        "url": "=https://query1.finance.yahoo.com/v8/finance/chart/{{ $json.yahooSymbol }}?range=5d&interval=1d",
        "options": {}
      },
      "name": "Fetch Yahoo Finance",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -5632,
        -80
      ],
      "id": "752c0b4a-d74a-4a3f-89a0-a88147ed38bd",
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "jsCode": "// Process Yahoo Finance data\nconst inputData = $input.all();\nconst smartSymbols = $('Smart Symbol Selection').all(); // previous-previous node\nconst results = [];\n\ninputData.forEach((item, index) => {\n  const chart = item.json.chart;\n  if (!chart || !chart.result || !chart.result[0]) {\n    return;\n  }\n\n  const result = chart.result[0];\n  const meta = result.meta;\n  const quotes = result.indicators.quote[0];\n\n  const currentPrice = meta.regularMarketPrice;\n  const previousClose = meta.chartPreviousClose;\n  const change = currentPrice - previousClose;\n  const changePercent = ((change / previousClose) * 100).toFixed(2);\n\n  const highs = quotes.high.filter(v => v !== null);\n  const lows = quotes.low.filter(v => v !== null);\n\n  const fiveDayHigh = Math.max(...highs);\n  const fiveDayLow = Math.min(...lows);\n\n  const trend = changePercent > 0 ? 'bullish' : 'bearish';\n  const trendEmoji = changePercent > 0 ? '📈' : '📉';\n\n  let priceDecimals = 2;\n  const category = smartSymbols[index].json.category;\n  if (category === 'Cryptocurrency') {\n    priceDecimals = currentPrice > 1000 ? 0 : currentPrice > 1 ? 2 : 6;\n  }\n\n  results.push({\n    symbol: meta.symbol,\n    yahooSymbol: smartSymbols[index].json.yahooSymbol,\n    tradingviewSymbol: smartSymbols[index].json.tradingviewSymbol,\n    name: smartSymbols[index].json.name,\n    category: category,\n    currentPrice: typeof currentPrice === \"number\" ? currentPrice.toFixed(priceDecimals) : null,\n    previousClose: typeof previousClose === \"number\" ? previousClose.toFixed(priceDecimals) : null,\n    change: typeof change === \"number\" ? change.toFixed(priceDecimals) : null,\n    changePercent: changePercent,\n    fiveDayHigh: typeof fiveDayHigh === \"number\" ? fiveDayHigh.toFixed(priceDecimals) : null,\n    fiveDayLow: typeof fiveDayLow === \"number\" ? fiveDayLow.toFixed(priceDecimals) : null,\n    support: typeof fiveDayLow === \"number\" ? fiveDayLow.toFixed(priceDecimals) : null,\n    resistance: typeof fiveDayHigh === \"number\" ? fiveDayHigh.toFixed(priceDecimals) : null,\n    trend: trend,\n    trendEmoji: trendEmoji,\n    timestamp: new Date().toISOString(),\n    date: new Date().toISOString().split('T')[0]\n  });\n});\n\nreturn results;\n"
      },
      "name": "Process Market Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5248,
        -96
      ],
      "id": "5511eac7-01e9-48c4-92c5-08b1a5b996d9"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst allMarketData = $('Process Market Data').all().map(i => i.json);\nconst results = [];\n\nitems.forEach((item, index) => {\n    const aiContent = item.json.message?.content || item.json.choices?.[0]?.message?.content || '';\n    const marketData = allMarketData[index] || allMarketData[0]; // align by index, fallback to 0\n    \n    // Extract title\n    const titleMatch = aiContent.match(/<h1[^>]*>([^<]+)<\\/h1>/);\n    const title = titleMatch ? titleMatch[1].trim() : `${marketData.name} Analysis - ${marketData.date}`;\n    \n    // Extract meta description\n    const metaMatch = aiContent.match(/<p[^>]*>([^<]+)<\\/p>/);\n    const metaDescription = metaMatch \n        ? metaMatch[1].trim().substring(0, 160)\n        : `${marketData.name} price analysis: $${marketData.currentPrice}, ${marketData.trend} trend with ${marketData.changePercent}% change.`;\n\n    // Build slug\n    const slug = `${(marketData.symbol || 'unknown').toLowerCase()}-analysis-${marketData.date}`;\n\n  const categoryIcons = {\n    'Cryptocurrency': '₿',\n    'Forex': '💱',\n    'Stock': '📊',\n    'Commodity': '🥇'\n  };\n  const categoryIcon = categoryIcons[marketData.category] || '📈';\n  \n  const fullArticleHtml = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${title} | DRMSI Trading Intelligence</title>\n    <meta name=\"description\" content=\"${metaDescription}\">\n    <meta name=\"keywords\" content=\"${marketData.name}, ${marketData.symbol}, ${marketData.category}, trading analysis\">\n    <meta name=\"author\" content=\"DRMSI Analysis Team\">\n    <link rel=\"canonical\" href=\"https://www.drmsi.com/articles/${slug}.html\">\n    \n    <meta property=\"og:type\" content=\"article\">\n    <meta property=\"og:url\" content=\"https://www.drmsi.com/articles/${slug}.html\">\n    <meta property=\"og:title\" content=\"${title}\">\n    <meta property=\"og:description\" content=\"${metaDescription}\">\n    <meta property=\"og:image\" content=\"https://www.drmsi.com/og-image.jpg\">\n    \n    <meta name=\"twitter:card\" content=\"summary_large_image\">\n    <meta name=\"twitter:title\" content=\"${title}\">\n    <meta name=\"twitter:description\" content=\"${metaDescription}\">\n    \n    <script type=\"application/ld+json\">\n    {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Article\",\n      \"headline\": \"${title}\",\n      \"author\": {\"@type\": \"Organization\", \"name\": \"DRMSI\"},\n      \"publisher\": {\"@type\": \"Organization\", \"name\": \"DRMSI\"},\n      \"datePublished\": \"${marketData.timestamp}\"\n    }\n    </script>\n    \n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #0f0f0f; color: #fff; line-height: 1.7; }\n        .container { max-width: 900px; margin: 0 auto; padding: 40px 20px; }\n        .back-link { display: inline-block; color: #fbbf24; text-decoration: none; margin-bottom: 30px; }\n        .article-meta { display: flex; gap: 20px; margin-bottom: 20px; font-size: 14px; color: #a0a0a0; }\n        .price-badge { background: ${marketData.changePercent >= 0 ? '#10b981' : '#ef4444'}; color: white; padding: 4px 12px; border-radius: 4px; }\n        h1 { font-size: 2.5rem; margin-bottom: 20px; }\n        h2 { font-size: 1.8rem; margin: 40px 0 20px; color: #fbbf24; }\n        p { margin-bottom: 20px; color: #d0d0d0; }\n        .chart-container { margin: 40px 0; background: #1a1a1a; border-radius: 12px; overflow: hidden; }\n        .risk-disclaimer { background: #1f1f1f; border-left: 4px solid #ef4444; padding: 20px; margin: 40px 0; border-radius: 4px; font-size: 14px; }\n        @media (max-width: 768px) { h1 { font-size: 2rem; } .container { padding: 20px 15px; } }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <a href=\"/\" class=\"back-link\">← Back to DRMSI</a>\n        <article>\n            <div class=\"article-meta\">\n                <span>📅 ${new Date(marketData.timestamp).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</span>\n                <span>${categoryIcon} ${marketData.category}</span>\n                <span class=\"price-badge\">${marketData.trendEmoji} ${marketData.changePercent}%</span>\n            </div>\n            ${aiContent}\n            <div class=\"chart-container\">\n                <div style=\"height:500px;width:100%\">\n\n<!-- TradingView Widget BEGIN -->\n<div class=\"tradingview-widget-container\">\n  <div class=\"tradingview-widget-container__widget\"></div>\n  <div class=\"tradingview-widget-copyright\"><a href=\"https://www.tradingview.com/\" rel=\"noopener nofollow\" target=\"_blank\"><span class=\"blue-text\">Track all markets on TradingView</span></a></div>\n  <script type=\"text/javascript\" src=\"https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js\" async>\n  {\n  \"width\": \"auto\",\n  \"height\": \"600\",\n  \"symbol\": \"${marketData.tradingviewSymbol}\",\n  \"interval\": \"240\",\n  \"timezone\": \"Etc/UTC\",\n  \"theme\": \"dark\",\n  \"style\": \"1\",\n  \"locale\": \"en\",\n  \"enable_publishing\": false,\n  \"allow_symbol_change\": true,\n  \"calendar\": false,\n  \"studies\": [\n    \"STD;Bollinger_Bands\",\n    \"STD;MA%1Cross\",\n    \"STD;MA%Ribbon\"\n  ],\n  \"support_host\": \"https://www.tradingview.com\"\n}\n  </script>\n</div>\n<!-- TradingView Widget END -->\n\t\t\t\t\t\n                </div>\n            </div>\n\n            ${$('Code ads').first().json.ads[0]}\n            <div>${$input.all()[index].json.text}</div>\n            ${$('Code ads').first().json.ads[1]}\n        </article>\n    </div>\n</body>\n</html>`;\n  \n  const summary = metaDescription.substring(0, 150) + '...';\n  const shortArticleCard = `<article class=\"article-card\" data-date=\"${marketData.timestamp}\">\n    <div class=\"article-image\"><span style=\"font-size: 3rem;\">${categoryIcon}</span></div>\n    <div class=\"article-content\">\n        <div class=\"article-meta\">\n            <span>📅 ${new Date(marketData.timestamp).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>\n            <span>🏷️ ${marketData.category}</span>\n        </div>\n        <h3>${title}</h3>\n        <p>${summary}</p>\n        <div style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 15px;\">\n            <span style=\"background: ${marketData.changePercent >= 0 ? '#10b981' : '#ef4444'}; color: white; padding: 4px 10px; border-radius: 4px; font-size: 13px;\">\n                ${marketData.trendEmoji} ${marketData.changePercent}%\n            </span>\n            <a href=\"/articles/${slug}.html\" style=\"color: #fbbf24; text-decoration: none; font-weight: 500;\">Read Analysis →</a>\n        </div>\n    </div>\n</article>`;\n  \n    // Push result\n    results.push({\n      title: title,\n      slug: slug,\n      fullArticleHtml: fullArticleHtml,\n      shortArticleCard: shortArticleCard,\n      symbol: marketData.symbol,\n      timestamp: marketData.date,\n      changePercent: marketData.changePercent\n    });\n});\n\nreturn results;\n\n"
      },
      "name": "Format HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4064,
        -112
      ],
      "id": "b8d14588-d411-4507-986f-c823921b77b0"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Edit Fields').item.json.GITHUB_OWNER }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Edit Fields').item.json.GITHUB_REPO }}",
          "mode": "name"
        },
        "filePath": "=articles/{{ $json.slug }}.html",
        "fileContent": "={{ $json.fullArticleHtml }}",
        "commitMessage": "=Add article: {{ $json.title }}"
      },
      "name": "Push Article",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -3008,
        48
      ],
      "id": "ea343b13-2f80-4798-b741-750dff44325b",
      "webhookId": "d2663f2a-ff4c-43e8-b74e-aead6be1245b",
      "alwaysOutputData": false,
      "credentials": {
        "githubOAuth2Api": {
          "id": "ed3t7HpRj8uarpvN",
          "name": "GitHub account outh2"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('Edit Fields').item.json.GITHUB_OWNER }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Edit Fields').item.json.GITHUB_REPO }}",
          "mode": "name"
        },
        "filePath": "index.html",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "name": "Get index.html",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -2464,
        -128
      ],
      "id": "a0b7a041-e325-47c6-a146-a3fbcaf72fba",
      "webhookId": "197d24f3-ae39-49bd-a644-67a700448150",
      "credentials": {
        "githubOAuth2Api": {
          "id": "ed3t7HpRj8uarpvN",
          "name": "GitHub account outh2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ===================================================================\n// n8n Node: Insert Article Cards into index.html\n// ===================================================================\n// This node receives:\n// 1. index.html data from GitHub (with content + sha)\n// 2. Multiple article items (each with shortArticleCard HTML)\n// \n// It merges new article cards with existing ones and updates index.html\n// ===================================================================\n\nconst allItems = $input.all();\n\n// ===================================================================\n// STEP 1: Find the index.html data from GitHub\n// ===================================================================\nconst indexItem = allItems.find(\n  item => item.json && item.json.content && item.json.sha\n);\n\nif (!indexItem) {\n  throw new Error('index.html data not found in input items. Ensure GitHub node output is connected.');\n}\n\nconst indexData = indexItem.json;\nconst sha = indexData.sha;\n\n// Decode the base64 content from GitHub\nconst currentContent = Buffer.from(indexData.content, 'base64').toString('utf-8');\n\n// ===================================================================\n// STEP 2: Extract all article items with shortArticleCard property\n// ===================================================================\nconst articleItems = allItems.filter(item => item.json && item.json.shortArticleCard);\n\nif (articleItems.length === 0) {\n  console.log('Warning: No new articles found to insert.');\n}\n\n// Extract the HTML card from each article\n//const newCards = articleItems.map(item => item.json.shortArticleCard);\nconst items = $('Format HTML').all();\nconst shortArticleCards = items.map(item => {\n  return {\n    content: item.json.shortArticleCard\n  };\n});\n\n//const newCards = shortArticleCards.map(c => ({ json: c }));\n//const newCards = shortArticleCards.map(item => item.json.shortArticleCard);\nconst newCards = shortArticleCards.map(item => item.content);\n\n// ===================================================================\n// STEP 3: Locate the articles grid section in the HTML\n// ===================================================================\nconst gridStartMarker = '<div class=\"articles-grid\" id=\"articlesGrid\">';\nconst gridEndMarker = '</div><!-- articlesGrid -->';\n\nconst articlesGridStart = currentContent.indexOf(gridStartMarker);\nconst gridCloseTag = currentContent.indexOf(gridEndMarker);\n\nif (articlesGridStart === -1 || gridCloseTag === -1) {\n  throw new Error('Could not find articles grid section in index.html. Check HTML structure.');\n}\n\n// Find where the opening tag ends\nconst gridOpenTagEnd = currentContent.indexOf('>', articlesGridStart) + 1;\n\n// ===================================================================\n// STEP 4: Extract existing article cards from the current HTML\n// ===================================================================\nconst gridContent = currentContent.substring(gridOpenTagEnd, gridCloseTag);\n\n// Regex to match complete article cards\nconst articleCardRegex = /<article class=\"article-card\"[\\s\\S]*?<\\/article>/g;\nconst existingCards = gridContent.match(articleCardRegex) || [];\n\nconsole.log(`Found ${existingCards.length} existing cards and ${newCards.length} new cards`);\n\n// ===================================================================\n// STEP 5: Merge new and existing cards (keep max 6 total)\n// ===================================================================\nconst maxTotalCards = 6;\n\n// Calculate how many existing cards to keep\nconst cardsToKeep = existingCards.slice(0, Math.max(0, maxTotalCards - newCards.length));\n\n// New cards first, then existing cards\nconst allCards = [...newCards, ...cardsToKeep];\n\n// ===================================================================\n// STEP 6: Format the combined cards with proper indentation\n// ===================================================================\nconst newArticlesContent = '\\n        ' + allCards.join('\\n        ') + '\\n      ';\n\n// ===================================================================\n// STEP 7: Reconstruct the HTML with updated articles\n// ===================================================================\nconst beforeGrid = currentContent.substring(0, gridOpenTagEnd);\nconst afterGrid = currentContent.substring(gridCloseTag);\n\nconst updatedContent = beforeGrid + newArticlesContent + afterGrid;\n\n// ===================================================================\n// STEP 8: Return the updated content for GitHub commit\n// ===================================================================\nreturn [{\n  json: {\n    content: updatedContent,\n    sha: sha,\n    message: `Updated articles: ${articleItems.map(a => a.json.title || 'Untitled').join(', ')}`,\n    articleCount: allCards.length,\n    newArticleCount: newCards.length,\n    existingArticleCount: cardsToKeep.length\n  }\n}];"
      },
      "name": "Update index",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1856,
        -144
      ],
      "id": "f7277fa1-3a73-4aec-b262-76049d30da52"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('Edit Fields').first().json.GITHUB_OWNER }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Edit Fields').first().json.GITHUB_REPO }}",
          "mode": "name"
        },
        "filePath": "index.html",
        "fileContent": "={{ $json.content }}",
        "commitMessage": "=Update homepage: {{ $json.articleTitles }}"
      },
      "name": "Push index",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -1456,
        -128
      ],
      "id": "d8ee5e12-3853-4de1-817a-f9474f05bd18",
      "webhookId": "322d0d2e-61b2-4291-be9a-7b2af7e5063f",
      "credentials": {
        "githubOAuth2Api": {
          "id": "ed3t7HpRj8uarpvN",
          "name": "GitHub account outh2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b145cac1-09b1-4e36-a0b7-adc571f77037",
              "name": "GITHUB_OWNER",
              "value": "drmsi",
              "type": "string"
            },
            {
              "id": "3538e94d-604e-46f4-8462-1ed69cdd1cc2",
              "name": "GITHUB_REPO",
              "value": "drmsi.com",
              "type": "string"
            },
            {
              "id": "5fa48395-495e-4f0d-9d7c-ff2eae050755",
              "name": "telegramchatid",
              "value": "6562770967",
              "type": "string"
            },
            {
              "id": "6b2d350d-a230-451d-a72e-0a83f0808080",
              "name": "commandid",
              "value": "={{ $('Telegram Trigger').isExecuted? $('Telegram Trigger').item.json.message.text.toLowerCase() : 'start'}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6960,
        48
      ],
      "id": "db3b801b-86d0-4fff-953c-6f80f3c555b8",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -3408,
        -160
      ],
      "id": "325d8e6c-52f9-489d-a83d-17d14fca09fe",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        -2560,
        272
      ],
      "id": "ca519f8a-903f-4f8b-97f6-cd9a2ac2edf7"
    },
    {
      "parameters": {
        "jsCode": "\nfunction escapeHtml(str) {\n  if (!str) return \"\";\n  return String(str)\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#39;\");\n}\n\nconst rows = items.map(item => item.json);\n\nlet html = $input.first().json.content;\n\nrows.forEach((row, idx) => {\n  const question = escapeHtml(row[\"Question\"]);\n  const choices = [\n    row[\"Choice A\"],\n    row[\"Choice B\"],\n    row[\"Choice C\"],\n    row[\"Choice D\"],\n    row[\"Choice E\"]\n  ];\n  const correctLetter = (row[\"Correct Letter\"] || \"\").toUpperCase().trim();\n  const correctIndex = correctLetter ? correctLetter.charCodeAt(0) - 65 : -1;\n  const explanation = escapeHtml(row[\"Explanation\"]);\n\n  html += `<div class=\"card\">`;\n  html += `<div class=\"meta\">${escapeHtml(row[\"Book\"])} | ${escapeHtml(row[\"Chapter\"])} | ${escapeHtml(row[\"Section\"])}</div>`;\n  html += `<div class=\"question\">${idx+1}. ${question}</div>`;\n  html += `<ul>`;\n  choices.forEach((choice, i) => {\n    if (!choice) return;\n    const isCorrect = i === correctIndex;\n    html += `<li class=\"${isCorrect ? 'correct' : ''}\"><b>${String.fromCharCode(65+i)}.</b> ${escapeHtml(choice)}</li>`;\n  });\n  html += `</ul>`;\n  html += `<div class=\"reveal\">Correct Answer: <b>${correctLetter}</b></div>`;\n  if (explanation) {\n    html += `<div class=\"explanation\">${explanation}</div>`;\n  }\n  html += `</div>`;\n});\n\nhtml += `</div></body></html>`;\n\nreturn [{ json: { html } }];"
      },
      "id": "2f67eeb5-af4c-442c-98c7-2734bd4679a1",
      "name": "Create HTML document1",
      "type": "n8n-nodes-base.code",
      "position": [
        -1632,
        96
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "html": "{{ $json.html }}"
      },
      "id": "b9631806-5d62-4bcb-9701-accf8b2025e3",
      "name": "HTML1",
      "type": "n8n-nodes-base.html",
      "position": [
        -1424,
        96
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2848,
        -144
      ],
      "id": "8a4ece71-b23a-4270-a88d-d5c3b2597d2d",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2720,
        80
      ],
      "id": "9c876992-185d-4c4f-aa26-a2a619a78567",
      "name": "Wait",
      "webhookId": "2f1b8ab9-999f-4d4a-828b-c90311f43ba4"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2144,
        -128
      ],
      "id": "e5883372-1376-4641-8dc7-103ee3d32572",
      "name": "Wait1",
      "webhookId": "0c0cfe25-91b4-44c0-b043-12744443efba"
    },
    {
      "parameters": {
        "chatId": "={{ $('Edit Fields').item.json.telegramchatid }}",
        "text": "=<b>Good news — drmsi_project finished!</b>\n<b>...</b>",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1152,
        96
      ],
      "id": "8f423452-0639-48bb-a890-9e11a2183d03",
      "name": "Send a text message1",
      "webhookId": "e6fa76ce-05fd-45bd-b8df-be3ff19be92c",
      "credentials": {
        "telegramApi": {
          "id": "tKh2AzKXKovWVkB0",
          "name": "Telegram account drmsi_bot"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "chatIds": "6562770967"
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -7312,
        192
      ],
      "id": "d558ce56-2421-43df-89fa-13c5be32da17",
      "name": "Telegram Trigger",
      "webhookId": "7a66d3d5-a9aa-493f-a71e-69ba3655403a",
      "credentials": {
        "telegramApi": {
          "id": "tKh2AzKXKovWVkB0",
          "name": "Telegram account drmsi_bot"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('Edit Fields').item.json.GITHUB_OWNER }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Edit Fields').item.json.GITHUB_REPO }}",
          "mode": "name"
        },
        "filePath": "index.html",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "name": "Get index.html1",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -6032,
        400
      ],
      "id": "cfdf619f-b5a0-44d4-9020-56436e4295b4",
      "webhookId": "197d24f3-ae39-49bd-a644-67a700448150",
      "credentials": {
        "githubOAuth2Api": {
          "id": "ed3t7HpRj8uarpvN",
          "name": "GitHub account outh2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\nconst allItems = $input.all();\n\n// ===================================================================\n// STEP 1: Find the index.html data from GitHub\n// ===================================================================\nconst indexItem = allItems.find(\n  item => item.json && item.json.content && item.json.sha\n);\n\nif (!indexItem) {\n  throw new Error('index.html data not found in input items. Ensure GitHub node output is connected.');\n}\n\nconst indexData = indexItem.json;\nconst sha = indexData.sha;\n\n// Decode the base64 content from GitHub\nconst currentContent = Buffer.from(indexData.content, 'base64').toString('utf-8');\n\n// ===================================================================\n// STEP 2: Extract all article items with shortArticleCard property\n// ===================================================================\nconst articleItems = allItems.filter(item => item.json && item.json.shortArticleCard);\n\nif (articleItems.length === 0) {\n  console.log('Warning: No new articles found to insert.');\n}\n\nconst newCards = [];\n\n// ===================================================================\n// STEP 3: Locate the articles grid section in the HTML\n// ===================================================================\nconst gridStartMarker = '<div class=\"articles-grid\" id=\"articlesGrid\">';\nconst gridEndMarker = '</div><!-- articlesGrid -->';\n\nconst articlesGridStart = currentContent.indexOf(gridStartMarker);\nconst gridCloseTag = currentContent.indexOf(gridEndMarker);\n\nif (articlesGridStart === -1 || gridCloseTag === -1) {\n  throw new Error('Could not find articles grid section in index.html. Check HTML structure.');\n}\n\n// Find where the opening tag ends\nconst gridOpenTagEnd = currentContent.indexOf('>', articlesGridStart) + 1;\n\n// ===================================================================\n// STEP 4: Extract existing article cards from the current HTML\n// ===================================================================\nconst gridContent = currentContent.substring(gridOpenTagEnd, gridCloseTag);\n\n// Regex to match complete article cards\nconst articleCardRegex = /<article class=\"article-card\"[\\s\\S]*?<\\/article>/g;\nconst existingCards = gridContent.match(articleCardRegex) || [];\n\nconsole.log(`Found ${existingCards.length} existing cards and ${newCards.length} new cards`);\n\n// ===================================================================\n// STEP 5: Merge new and existing cards (keep max 6 total)\n// ===================================================================\nconst maxTotalCards = 6;\n\n// Calculate how many existing cards to keep\nconst cardsToKeep = existingCards.slice(0, Math.max(0, maxTotalCards - newCards.length));\n\n// New cards first, then existing cards\nconst allCards = [...newCards, ...cardsToKeep];\n\n// ===================================================================\n// STEP 6: Format the combined cards with proper indentation\n// ===================================================================\nconst newArticlesContent = '\\n        ' + allCards.join('\\n        ') + '\\n      ';\n\n// ===================================================================\n// STEP 7: Reconstruct the HTML with updated articles\n// ===================================================================\nconst beforeGrid = currentContent.substring(0, gridOpenTagEnd);\nconst afterGrid = currentContent.substring(gridCloseTag);\n\n//const updatedContent = beforeGrid + newArticlesContent + afterGrid;\n\nconst updatedContent = beforeGrid + afterGrid;\n// ===================================================================\n// STEP 8: Return the updated content for GitHub commit\n// ===================================================================\nreturn [{\n  json: {\n    content: updatedContent,\n    sha: sha,\n    message: `Updated articles: ${articleItems.map(a => a.json.title || 'Untitled').join(', ')}`,\n    articleCount: allCards.length,\n    newArticleCount: newCards.length,\n    existingArticleCount: cardsToKeep.length\n  }\n}];"
      },
      "name": "Update index2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5504,
        384
      ],
      "id": "f7484d8e-773a-413d-8d4e-15edf34acbbe"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('Edit Fields').first().json.GITHUB_OWNER }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Edit Fields').first().json.GITHUB_REPO }}",
          "mode": "name"
        },
        "filePath": "index.html",
        "fileContent": "={{ $json.content }}",
        "commitMessage": "=Update homepage: {{ $json.articleTitles }}"
      },
      "name": "Push index1",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -5104,
        400
      ],
      "id": "76f4eae6-c711-4f09-b362-389e4c83c96e",
      "webhookId": "322d0d2e-61b2-4291-be9a-7b2af7e5063f",
      "credentials": {
        "githubOAuth2Api": {
          "id": "ed3t7HpRj8uarpvN",
          "name": "GitHub account outh2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\nfunction escapeHtml(str) {\n  if (!str) return \"\";\n  return String(str)\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#39;\");\n}\n\nconst rows = items.map(item => item.json);\n\nlet html = $input.first().json.content;\n\nrows.forEach((row, idx) => {\n  const question = escapeHtml(row[\"Question\"]);\n  const choices = [\n    row[\"Choice A\"],\n    row[\"Choice B\"],\n    row[\"Choice C\"],\n    row[\"Choice D\"],\n    row[\"Choice E\"]\n  ];\n  const correctLetter = (row[\"Correct Letter\"] || \"\").toUpperCase().trim();\n  const correctIndex = correctLetter ? correctLetter.charCodeAt(0) - 65 : -1;\n  const explanation = escapeHtml(row[\"Explanation\"]);\n\n  html += `<div class=\"card\">`;\n  html += `<div class=\"meta\">${escapeHtml(row[\"Book\"])} | ${escapeHtml(row[\"Chapter\"])} | ${escapeHtml(row[\"Section\"])}</div>`;\n  html += `<div class=\"question\">${idx+1}. ${question}</div>`;\n  html += `<ul>`;\n  choices.forEach((choice, i) => {\n    if (!choice) return;\n    const isCorrect = i === correctIndex;\n    html += `<li class=\"${isCorrect ? 'correct' : ''}\"><b>${String.fromCharCode(65+i)}.</b> ${escapeHtml(choice)}</li>`;\n  });\n  html += `</ul>`;\n  html += `<div class=\"reveal\">Correct Answer: <b>${correctLetter}</b></div>`;\n  if (explanation) {\n    html += `<div class=\"explanation\">${explanation}</div>`;\n  }\n  html += `</div>`;\n});\n\nhtml += `</div></body></html>`;\n\nreturn [{ json: { html } }];"
      },
      "id": "f9afc35e-2a48-478c-8970-b04226f52a42",
      "name": "Create HTML document",
      "type": "n8n-nodes-base.code",
      "position": [
        -5280,
        624
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "html": "{{ $json.html }}"
      },
      "id": "294d614a-bec1-420f-a997-0e74d846eb38",
      "name": "HTML",
      "type": "n8n-nodes-base.html",
      "position": [
        -5072,
        624
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -5792,
        400
      ],
      "id": "1ab0db36-3e64-4b78-ac39-4a8044b2a882",
      "name": "Wait2",
      "webhookId": "0c0cfe25-91b4-44c0-b043-12744443efba"
    },
    {
      "parameters": {
        "chatId": "={{ $('Edit Fields').item.json.telegramchatid }}",
        "text": "=<b>Good news — drmsi_project finished!</b>\n<b>...</b>",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -4800,
        624
      ],
      "id": "1874e94c-3c76-4017-8c8f-f270772a345b",
      "name": "Send a text message",
      "webhookId": "e6fa76ce-05fd-45bd-b8df-be3ff19be92c",
      "credentials": {
        "telegramApi": {
          "id": "tKh2AzKXKovWVkB0",
          "name": "Telegram account drmsi_bot"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c4004c41-c705-4ebf-8297-dbf1b80820fa",
                    "leftValue": "={{ $('Edit Fields').item.json.commandid }}",
                    "rightValue": "start",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "start"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Edit Fields').item.json.commandid }}",
                    "rightValue": "clean",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "fa7bd1d8-0d67-4c32-a778-03c95900f517"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "clean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -6400,
        64
      ],
      "id": "8472a84d-8df0-4765-a802-54aa0baecc86",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      ads: [\n        `<center>\n<a href=\"https://one.justmarkets.link/a/ffrhc0iuso\" referrerpolicy=\"no-referrer-when-downgrade\"><img src=\"../images/jm.jpg\" width=\"90%\" height=\"auto\" /></a>\n</center>`,\n        `<center>\n<a href=\"https://one.justmarkets.link/a/ffrhc0iuso\" referrerpolicy=\"no-referrer-when-downgrade\"><img src=\"../images/jmbanner.jpg\" width=\"90%\" height=\"auto\" /></a>\n</center>`\n      ]\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6672,
        64
      ],
      "id": "2a6708f3-803b-4a7a-8404-1ba86e2c4905",
      "name": "Code ads"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -7504,
        16
      ],
      "id": "531b24b0-a5ca-4993-b7ba-987a2b63d4ef",
      "name": "When clicking ‘Execute workflow’"
    }
  ],
  "pinData": {},
  "connections": {
    "Generate Article with AI (OpenAI/Gemini)": {
      "main": [
        [
          {
            "node": "Format HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Every 4 Hours": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Smart Symbol Selection": {
      "main": [
        [
          {
            "node": "Fetch Yahoo Finance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Yahoo Finance": {
      "main": [
        [
          {
            "node": "Process Market Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format HTML": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Push Article": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get index.html": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update index": {
      "main": [
        [
          {
            "node": "Push index",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create HTML document1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Market Data": {
      "main": [
        [
          {
            "node": "Generate Article with AI (OpenAI/Gemini)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code ads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create HTML document1": {
      "main": [
        [
          {
            "node": "HTML1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Get index.html",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Push Article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Update index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML1": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get index.html1": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update index2": {
      "main": [
        [
          {
            "node": "Push index1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create HTML document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create HTML document": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Update index2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Smart Symbol Selection",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get index.html1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code ads": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "67a12bb4-a7a2-4b66-82ec-0f7108f89433",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d710a8d4701503eaaf605e53adbfea6a3b37e0a29e19418733c253f4e29a42e3"
  },
  "id": "beJdisAYqWlOssmB",
  "tags": [
    {
      "createdAt": "2025-10-02T16:30:45.499Z",
      "updatedAt": "2025-10-02T16:30:45.499Z",
      "id": "KsSO0Hbb8z9KuB6s",
      "name": "trading"
    },
    {
      "createdAt": "2025-10-02T16:30:45.531Z",
      "updatedAt": "2025-10-02T16:30:45.531Z",
      "id": "hDclAcFbvBIlHhs5",
      "name": "automation"
    }
  ]
}